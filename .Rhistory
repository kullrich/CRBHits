log10(15)
log10(20)
log10(50)
library(CRBHits)
make.last()
?cds2rbh
data("ath", package="CRBHits")
data("aly", package="CRBHits")
#conditional-reciprocal best hits
ath_aly_crbh <- cds2rbh(ath, aly, plotCurve = TRUE)
cds1 <- paste0("ftp://ftp.pombase.org/pombe/genome_sequence_and_features/",
"feature_sequences/cds.fa.gz")
cds2 <- paste0("ftp://ftp.ebi.ac.uk/pub/databases/reference_proteomes/QfO/",
"Eukaryota/UP000001593_45351_DNA.fasta.gz")
#get help ?cdsfile2rbh
cds1.cds2.crbh <- cdsfile2rbh(cds1, cds2, plotCurve = TRUE, threads = 4)
getwd()
?png
png("../joss_crbhits/figure2.png", res=150)
cds1 <- paste0("ftp://ftp.pombase.org/pombe/genome_sequence_and_features/",
"feature_sequences/cds.fa.gz")
cds2 <- paste0("ftp://ftp.ebi.ac.uk/pub/databases/reference_proteomes/QfO/",
"Eukaryota/UP000001593_45351_DNA.fasta.gz")
#get help ?cdsfile2rbh
cds1.cds2.crbh <- cdsfile2rbh(cds1, cds2, plotCurve = TRUE, threads = 4)
dev.off()
png("../joss_crbhits/figure2.png", width=1200,height=800)
cds1 <- paste0("ftp://ftp.pombase.org/pombe/genome_sequence_and_features/",
"feature_sequences/cds.fa.gz")
cds2 <- paste0("ftp://ftp.ebi.ac.uk/pub/databases/reference_proteomes/QfO/",
"Eukaryota/UP000001593_45351_DNA.fasta.gz")
#get help ?cdsfile2rbh
cds1.cds2.crbh <- cdsfile2rbh(cds1, cds2, plotCurve = TRUE, threads = 4)
dev.off()
png("../joss_crbhits/figure2.png", width=1200,height=800, res = 300)
cds1 <- paste0("ftp://ftp.pombase.org/pombe/genome_sequence_and_features/",
"feature_sequences/cds.fa.gz")
cds2 <- paste0("ftp://ftp.ebi.ac.uk/pub/databases/reference_proteomes/QfO/",
"Eukaryota/UP000001593_45351_DNA.fasta.gz")
#get help ?cdsfile2rbh
cds1.cds2.crbh <- cdsfile2rbh(cds1, cds2, plotCurve = TRUE, threads = 4)
dev.off()
png("../joss_crbhits/figure2.png", width=1200,height=800, res = 150)
cds1 <- paste0("ftp://ftp.pombase.org/pombe/genome_sequence_and_features/",
"feature_sequences/cds.fa.gz")
cds2 <- paste0("ftp://ftp.ebi.ac.uk/pub/databases/reference_proteomes/QfO/",
"Eukaryota/UP000001593_45351_DNA.fasta.gz")
#get help ?cdsfile2rbh
cds1.cds2.crbh <- cdsfile2rbh(cds1, cds2, plotCurve = TRUE, threads = 4)
dev.off()
cds1.cds2.crbh$rbh1_rbh2_fit()
cds1.cds2.crbh$rbh1_rbh2_fit
library(CRBHits)
?cds2rbh
make.last()
data("ath", package="CRBHits")
data("aly", package="CRBHits")
#conditional-reciprocal best hits
ath_aly_crbh <- cds2rbh(ath, aly, plotCurve = TRUE)
devtools::build_vignettes()
?dnastring2aln
?rgb
?mean
?median
?rgb
pkgdown::buil()
pkgdown::build()
pkgdown::build_article()
pkgdown::build_site()
myfilter <- function(rbh, value = 500.0){
return(rbh[as.numeric(rbh[, 12]) >= value , , drop = FALSE])
}
ath_aly_crbh.custom <- cds2rbh(ath, aly, filter = c("myfilter"))
dim(ath_aly_crbh.custom)
dim(ath_aly_crbh.custom$crbh.pairs)
myfilter <- function(rbh, value = 500.0){
return(rbh[as.numeric(rbh[, 12]) >= value , , drop = FALSE])
}
list(myfilter())
list(myfilter)
filter=list(myfilter)
for(f in filter){
f}
f
ath_aly_crbh$crbh1 %>% f
library(magrittr)
ath_aly_crbh$crbh1 %>% f
dim(ath_aly_crbh$crbh1 %>% f)
dim(ath_aly_crbh$crbh1)
library(CRBHits)
make.last()
?cds2rbh
data("ath", package="CRBHits")
data("aly", package="CRBHits")
#conditional-reciprocal best hits
ath_aly_crbh <- cds2rbh(ath, aly, plotCurve = TRUE)
dim(ath_aly_crbh$crbh.pairs)
#reciprocal best hits
ath_aly_rbh <- cds2rbh(ath, aly, crbh = FALSE)
dim(ath_aly_rbh$rbh.pairs)
#filter for evalue 1e-100
ath_aly_crbh.eval100 <- cds2rbh(ath, aly, evalue = 1e-100)
dim(ath_aly_crbh.eval100$crbh.pairs)
ath_aly_crbh.qcov <- cds2rbh(ath, aly, qcov = 0.5)
dim(ath_aly_crbh.qcov$crbh.pairs)
myfilter <- function(rbh, value = 500.0){
return(rbh[as.numeric(rbh[, 12]) >= value , , drop = FALSE])
}
ath_aly_crbh.custom <- cds2rbh(ath, aly, filter = c("myfilter"))
ath_aly_crbh.custom <- cds2rbh(ath, aly, filter = list(myfilter))
dim(ath_aly_crbh.custom$crbh.pairs)
pkgdown::build_site()
library(CRBHits)
#example how to get crbh from two coding fasta files
cdsfile1 <- system.file("fasta/ath.cds.fasta.gz", package = "CRBHits")
cdsfile2 <- system.file("fasta/aly.cds.fasta.gz", package = "CRBHits")
cds1 <- Biostrings::readDNAStringSet(cdsfile1)
cds2 <- Biostrings::readDNAStringSet(cdsfile2)
#the following function calcualtes crbh matrix using one thread
ath_aly_crbh <- cds2rbh(cds1, cds2, plotCurve = TRUE)
?cds2rbh
summary(ath_aly_crbh)
?cds2rbh
colnames(ath_aly_crbh)
colnames(ath_aly_crbh$crbh1)
ath_aly_crbh$crbh1$rbh_class
table(ath_aly_crbh$crbh1$rbh_class)
dim(ath_aly_crbh$crbh.pairs)
head(ath_aly_crbh$crbh.pairs)
head(ath_aly_crbh$crbh1)
table(ath_aly_crbh$crbh1$rbh_class)
table(ath_aly_crbh$crbh2$rbh_class)
ath_aly_crbh <- cds2rbh(cds1, cds2, plotCurve = TRUE, keepSingleDirection = TRUE)
table(ath_aly_crbh$crbh1$rbh_class)
table(ath_aly_crbh$crbh2$rbh_class)
dim(ath_aly_crbh$crbh.pairs)
745+53
745+53+2
745+53+2+5
dim(ath_aly_crbh)
?cds2rbh
ath_aly_crbh <- cds2rbh(cds1, cds2, plotCurve = TRUE, qcov = 0.5)
dim(ath_aly_crbh$crbh.pairs)
ath_aly_crbh <- cds2rbh(cds1, cds2, plotCurve = TRUE, rost1999 = TRUE)
dim(ath_aly_crbh$crbh.pairs)
ath_aly_crbh <- cds2rbh(cds1, cds2, plotCurve = TRUE, rost1999 = FALSE)
dim(ath_aly_crbh$crbh.pairs)
myfilter <- function(rbh, value = 500.0){
return(rbh[as.numeric(rbh[, 12]) >= value , , drop = FALSE])
}
#example hot to filter prior crbh with custom filter
ath_aly_crbh <- cds2rbh(cds1, cds2, plotCurve = TRUE, filter = list(myfilter))
dim(ath_aly_crbh$crbh.pairs)
ath_aly_rbh <- cds2rbh(cds1, cds2, crbh = FALSE)
ath_aly_rbh$rbh1
dim(ath_aly_rbh$rbh1)
dim(ath_aly_rbh$rbh.pairs)
ath_aly_crbh$rbh1_rbh2_fit
curve(ath_aly_crbh$rbh1_rbh2_fit, from = 0, to = 100)
curve(ath_aly_crbh$rbh1_rbh2_fit(), from = 0, to = 100)
curve(ath_aly_crbh$rbh1_rbh2_fit(x), from = 0, to = 100)
curve(ath_aly_crbh$rbh1_rbh2_fit(x), from = 0, to = 1000)
ath_aly_crbh <- cds2rbh(cds1, cds2, plotCurve = TRUE)
curve(ath_aly_crbh$rbh1_rbh2_fit(x), from = 0, to = 100)
curve(ath_aly_crbh$rbh1_rbh2_fit(x), from = 0, to = 1000)
curve(ath_aly_crbh$rbh1_rbh2_fit(x), from = 0, to = 1000)$y
curve(ath_aly_crbh$rbh1_rbh2_fit(x), from = 0, to = 1000)$x
curve(ath_aly_crbh$rbh1_rbh2_fit(x), from = 0, to = 1000)$y
plot(x = log10(seq(from = 1, to = 1000)), y = curve(ath_aly_crbh$rbh1_rbh2_fit(x), from = 0, to = 1000)$y)
plot(x = log10(seq(from = 1, to = 1000)), y = curve(ath_aly_crbh$rbh1_rbh2_fit(x), from = 1, to = 1000)$y)
curve(ath_aly_crbh$rbh1_rbh2_fit(x), from = 1, to = 1000)$y
length(curve(ath_aly_crbh$rbh1_rbh2_fit(x), from = 1, to = 1000)$y)
length(curve(ath_aly_crbh$rbh1_rbh2_fit(x), from = 1, to = 100)$y)
length(curve(ath_aly_crbh$rbh1_rbh2_fit(x), from = 1, to = 10000)$y)
length(curve(ath_aly_crbh$rbh1_rbh2_fit(x), from = 1, to = 100)$y)
curve(ath_aly_crbh$rbh1_rbh2_fit(x), from = 1, to = 100)
curve(ath_aly_crbh$rbh1_rbh2_fit(x), from = 1, to = 1000)
curve(ath_aly_crbh$rbh1_rbh2_fit(x), from = 1, to = 1000, xlab = log)
curve(ath_aly_crbh$rbh1_rbh2_fit(x), from = 1, to = 1000, xlab = log10)
?curve
curve(ath_aly_crbh$rbh1_rbh2_fit(x), from = 1, to = 1000, log)
curve(ath_aly_crbh$rbh1_rbh2_fit(x), from = 1, to = 1000, log)
curve(ath_aly_crbh$rbh1_rbh2_fit(x), from = 1, to = 1000, log=T)
curve(ath_aly_crbh$rbh1_rbh2_fit(x), from = 1, to = 1000, log=10)
curve(ath_aly_crbh$rbh1_rbh2_fit(x), from = 1, to = 1000, log=ll)
curve(ath_aly_crbh$rbh1_rbh2_fit(x), from = 1, to = 1000, log=11)
curve(ath_aly_crbh$rbh1_rbh2_fit(x), from = 1, to = 1000)
curve(ath_aly_crbh$rbh1_rbh2_fit(x), from = 1, to = 1000, yalb = "-log10(evalue)", xlab = "alnlenght")
curve(ath_aly_crbh$rbh1_rbh2_fit(x),
from = 1,
to = 1000,
xlab = "alnlength",
ylab = "-log10(evalue)")
curve(ath_aly_crbh$rbh1_rbh2_fit(x),
from = 1,
to = 1000,
xlab = "alnlength",
ylab = "-log10(evalue)",
main = "CRBH fitting")
points(x = ath_aly_crbh$crbh1$alignment_length,
y = -log10(ath_aly_crbh$crbh1$evalue),
pch = 20,
col = "grey")
points(x = ath_aly_crbh$crbh1$alignment_length,
y = -log10(ath_aly_crbh$crbh1$evalue),
pch = 20,
col = ath_aly_crbh$crbh1$rbh_class)
points(x = ath_aly_crbh$crbh1$alignment_length,
y = -log10(ath_aly_crbh$crbh1$evalue),
pch = 20,
col = as.factor(ath_aly_crbh$crbh1$rbh_class))
curve(ath_aly_crbh$rbh1_rbh2_fit(x),
from = 1,
to = 1000,
xlab = "alnlength",
ylab = "-log10(evalue)",
main = "CRBH fitting")
?rbh2kaks
pkgdown::build_site()
plot(1,pch=20,col=col2transparent("#648783", 50))
plot(1,pch=20,col=col2transparent("#4d83ab", 25),cex=5)
plot(1,pch=20,col=col2transparent("#4D83ab", 25),cex=5)
my.palette <- c("#C4A220", "#648783", "#CB7B26", "#4D83AB",
"#BF565D", "#659865", "#695A57", "#87922B")
?col2transparent
sinplot <- function(main=NULL) {
x <- outer(
seq(-pi, pi, length.out = 50),
seq(0, pi, length.out = 8),
function(x, y) sin(x - y)
)
matplot(x, type = "l", lwd = 4, lty = 1, col = 1:8, ylab = "", main=main)
}
palette("R3"); sinplot("R3")
palette(my.palette)
sinplot("my.palette")
palette("R3"); sinplot("R3")
sinplot("my.palette")
palette(my.palette)
sinplot("my.palette")
palette(col2transparent(palette(my.palette), 50)); sinplot("my.palette - transparent")
palette(col2transparent(palette("R3"), 50)); sinplot("my.palette - transparent")
palette(col2transparent(palette("R3"), 50)); sinplot("my.palette - transparent")
palette(col2transparent(palette("R3"), 50))
palette("R3")
sinplot("a")
palette(col2transparent(palette("R3"), 50)); sinplot("my.palette - transparent")
palette(col2transparent(palette("default"), 50)); sinplot("my.palette - transparent")
palette(col2transparent(palette("default"), 50)); sinplot("my.palette - transparent")
palette(col2transparent(palette("default"), 50))
palette("default")
palette(col2transparent(palette("default"), 50))
palette(col2transparent(palette("default"), 50)); sinplot("my.palette - transparent")
palette(my.palette); sinplot("my.palette")
palette(col2transparent(palette(my.palette), 50)); sinplot("my.palette - transparent")
palette(my.palette); sinplot("my.palette")
library(wesanderson)
wes_palette("Zissou1")
palette(wes_palette("Zissou1"))
sinplot("a")
palette(wes_palette("Zissou1",8))
palette(wes_palette("Zissou1",8,type = "continous"))
palette(wes_palette("Zissou1",8,type = "continuous"))
sinplot("a")
palette(col2transparent(palette(wes_palette("Zissou1",8,type = "continuous")),50))
sinplot("a")
palette(wes_palette("Zissou1",8,type = "continuous"))
sinplot("a")
my.palette <- c("#C4A220", "#648783", "#CB7B26", "#4D83AB",
"#BF565D", "#659865", "#695A57", "#87922B")
sinplot("a")
palette(my.palette)
sinplot("a")
sinplot <- function(main=NULL) {
x <- outer(
seq(-pi, pi, length.out = 50),
seq(0, pi, length.out = 9),
function(x, y) sin(x - y)
)
matplot(x, type = "l", lwd = 4, lty = 1, col = 1:9, ylab = "", main=main)
}
my.palette <- c("#cbc106", "#27993c", "#1c6838",
"#8ebcb5", "#389ca7", "#4d83ab",
"#cb7b26", "#bf565d", "#9e163c")
palette(my.palette); sinplot("my.palette")
palette(col2transparent(palette(my.palette), 50)); sinplot("my.palette - transparent")
my.palette <- c("#CBC106", "#27993C", "#1C6838",
"#8EBCB5", "#389CA7", "#4D83AB",
"#CB7B26", "#BF565D", "#9E163C")
palette(my.palette); sinplot("my.palette")
palette(col2transparent(palette(my.palette), 25)); sinplot("my.palette - transparent")
palette(col2transparent(palette(my.palette), 50)); sinplot("my.palette - transparent")
palette(col2transparent(palette(my.palette), 75)); sinplot("my.palette - transparent")
palette(my.palette); sinplot("my.palette")
library(CRBHits)
?cds2cds2aa
?cds2rbh
make.last()
data("ath", package="CRBHits")
data("aly", package="CRBHits")
#conditional-reciprocal best hits
ath_aly_crbh <- cds2rbh(ath, aly, plotCurve = TRUE)
png("../joss_crbhits/figure2.png", width=1200,height=800, res = 150)
cds1 <- paste0("ftp://ftp.pombase.org/pombe/genome_sequence_and_features/",
"feature_sequences/cds.fa.gz")
cds2 <- paste0("ftp://ftp.ebi.ac.uk/pub/databases/reference_proteomes/QfO/",
"Eukaryota/UP000001593_45351_DNA.fasta.gz")
cds1.cds2.crbh <- cdsfile2rbh(cds1, cds2, plotCurve = TRUE, threads = 4)
dev.off()
library(CRBHits)
make.last()
png("../joss_crbhits/figure2.png", width=1200,height=800, res = 150)
cds1 <- paste0("ftp://ftp.pombase.org/pombe/genome_sequence_and_features/",
"feature_sequences/cds.fa.gz")
cds2 <- paste0("ftp://ftp.ebi.ac.uk/pub/databases/reference_proteomes/QfO/",
"Eukaryota/UP000001593_45351_DNA.fasta.gz")
cds1.cds2.crbh <- cdsfile2rbh(cds1, cds2, plotCurve = TRUE, threads = 4)
dev.off()
?col2transparent
sinplot <- function(main=NULL) {
x <- outer(
seq(-pi, pi, length.out = 50),
seq(0, pi, length.out = 9),
function(x, y) sin(x - y)
)
matplot(x, type = "l", lwd = 4, lty = 1, col = 1:9, ylab = "", main=main)
}
my.palette <- c("#CBC106", "#27993C", "#1C6838",
"#8EBCB5", "#389CA7", "#4D83AB",
"#CB7B26", "#BF565D", "#9E163C")
palette(my.palette); sinplot("my.palette")
palette(col2transparent(palette(my.palette), 25)); sinplot("my.palette - transparent")
palette(col2transparent(palette(my.palette), 75)); sinplot("my.palette - transparent")
sinplot <- function(main=NULL) {
x <- outer(
seq(-pi, pi, length.out = 50),
seq(0, pi, length.out = 9),
function(x, y) sin(x - y)
)
matplot(x, type = "l", lwd = 4, lty = 1, col = 1:9, ylab = "", main=main)
}
my.palette <- c("#CBC106", "#27993C", "#1C6838",
"#8EBCB5", "#389CA7", "#4D83AB",
"#CB7B26", "#BF565D", "#9E163C")
palette(my.palette); sinplot("my.palette")
library(rgl)
rgl.useNULL
cdsfile <- system.file("fasta/ath.cds.fasta.gz", package = "CRBHits")
cds <- Biostrings::readDNAStringSet(cdsfile)
cds
any(Biostrings::width(cds) %% 3 == 0)
system.file(package = "CRBHits")
system(paste0("ls ",system.file(package = "CRBHits"))
)
system.file("fasta/ath.cds.fasta.gz", package = "CRBHits")
cdsfile <- paste0(system.file(package = "CRBHits"), "/fasta/ath.cds.fasta.gz")
cdsfile
cds <- Biostrings::readDNAStringSet(cdsfile)
cds
system.file("fasta/ath.cds.fasta.gz", package = "CRBHits")
system.file(package = "CRBHits")
cdsfile <- paste0(system.file(package = "CRBHits"), "/fasta/ath.cds.fasta.gz")
cdsfile
find.package("CRBHits")
system.file(CRBHits)
system.file(package = "CRBHits")
paste0(find.package("CRBHits"), "/fasta/ath.cds.fasta.gz")
system.file("fasta","ath.cds.fasta.gz",package = "CRBHits")
system.file("fasta/ath.cds.fasta.gz",package = "CRBHits")
?system.file
?find.package
system.file("fasta", "ath.cds.fasta.gz", package = "CRBHits")
pkgdown::build_site()
devtools::check()
pkgdown::build_site()
devtools::build_vignettes()
devtools::build_vignettes()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biostrings")
vignette(package="CRBHits")
?vignette
browseVignettes("CRBHits")
rm(list=ls())
library(CRBHits)
sessionInfo()
cdsfile <- system.file("fasta", "ath.cds.fasta.gz", package = "CRBHits")
cds <- Biostrings::readDNAStringSet(cdsfile)
#the following statement should return TRUE, if all sequences are a mutiple of three
any(Biostrings::width(cds) %% 3 == 0)
Biostrings::width(cds)
Biostrings::width(cds) %% 3
Biostrings::width(cds) %% 3 == 0
any(Biostrings::width(cds) %% 3 == 0)
any(T,T,T)
any(T,T,T,F)
any(c(T,T,T,F))
any(!c(T,T,T,F))
any(!c(T,T,T))
Biostrings::width(cds) %% 3 == 0
!Biostrings::width(cds) %% 3 == 0
any(!Biostrings::width(cds) %% 3 == 0)
Biostrings::width(cds) %% 3 == 0
any(Biostrings::width(cds) %% 3 == 0)
all(Biostrings::width(cds) %% 3 == 0)
all(T,T,T)
all(T,T,T,F)
data("ath")
ath
?Biostrings::readDNAMultipleAlignment
devtools::build_vignettes()
Biostrings::readDNAStringSet(NULL)
?cdsfile2rbh
Biostrings::readDNAStringSet(ssystem.file("fasta","ath.cds.fa.gz",package="CRBHits"))
Biostrings::readDNAStringSet(system.file("fasta","ath.cds.fa.gz",package="CRBHits"))
Biostrings::readDNAStringSet(system.file("fasta","ath.cds.fasta.gz",package="CRBHits"))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biostrings")
vignette("pkgdown")
?pkgdown::build_articles_index()
pkgdown::build_article()
pkgdown::build_articles()
pkgdown::build_articles()
pkgdown::build_site()
?missing
?cds2rbh
library(CRBHits)
?cds2rbh
library(CRBHits)
devtools::build_vignettes()
?cds2codonaln
?Biostrings::pairwiseAlignment()
?cds2codonaln
cds1 <- Biostrings::DNAString("ATGCAACATTGC")
cds2 <- Biostrings::DNAString("ATGCATTGC")
cds2codonaln(cds1, cds2)
?Biostrings::pairwiseAlignment()
?Biostrings::AAString()
?cds2codonaln
?cds2aa
cds2codonaln(cds1, cds2, substitutionMatrix = BLOSUM45)
cds2codonaln(cds1, cds2, substitutionMatrix = BLOSUM62)
cds2codonaln(cds1, cds2)
cds2codonaln(cds1, cds2, substitutionMatrix = "BLOSUM62")
cds2codonaln(cds1, cds2, substitutionMatrix = "BLOSUM45")
cds2codonaln(cds1, cds2, substitutionMatrix = "BLOSUM45", remove.gaps = TRUE)
cds2codonaln(cds1, cds2, remove.gaps = TRUE)
?cds2kaks
_rbh2kaks
?rbh2kaks
?plot
library(CRBHits)
?cds2kaks
?cds2kaks
library(CRBHits)
?cds2kaks
data("ath", package="CRBHits")
data("aly", package="CRBHits")
##select a sequence pair according to a best hit pair (done for you)
cds1 <- ath[1]
cds2 <- aly[282]
cds2kaks(cds1, cds2, model = "Li")
data("ath", package="CRBHits")
data("aly", package="CRBHits")
##select a sequence pair according to a best hit pair (done for you)
cds1 <- ath[1]
cds2 <- aly[282]
cds2kaks(cds1, cds2, model = "Li", substitutionMatrix = "BLOSUM45")
?cdcds2aa
?cds2codonaln
?cds2rbh
cds2kaks(cds1, cds2, model = "Li", substitutionMatrix = "BLOSUM45")
cds2kaks(cds1, cds2, model = "Li", substitutionMatrix = "BLOSUM80")
cds2kaks(cds1, cds2, model = "Li", substitutionMatrix = "BLOSUM90")
cds2kaks(cds1, cds2, model = "Li", substitutionMatrix = "BLOSUM80")
library(CRBHits)
?cds2kaks
?rbh2kaks
library(CRBHits)
?cds2rbh
?rbh2kaks
##load example sequence data
data("ath", package="CRBHits")
data("aly", package="CRBHits")
##load example conditional-reciprocal best hit pair results
data("ath_aly_crbh", package="CRBHits")
ath_aly_crbh.kaks <- rbh2kaks(ath_aly_crbh$crbh.pairs[1:20, ],
ath, aly, model = "Li")
head(ath_aly_crbh.kaks)
ath_aly_crbh.kaks <- rbh2kaks(ath_aly_crbh$crbh.pairs[1:20, ],
cds1, cds2, model = "Li", threads = 4)
cdsfile1 <- system.file("fasta", "ath.cds.fasta.gz", package = "CRBHits")
cdsfile2 <- system.file("fasta", "aly.cds.fasta.gz", package = "CRBHits")
cds1 <- Biostrings::readDNAStringSet(cdsfile1)
cds2 <- Biostrings::readDNAStringSet(cdsfile2)
ath_aly_crbh.kaks <- rbh2kaks(ath_aly_crbh$crbh.pairs[1:20, ],
cds1, cds2, model = "Li", threads = 4)
ath_aly_crbh.kaks <- rbh2kaks(ath_aly_crbh$crbh.pairs[1:20, ],
cds1, cds2, model = "Li", threads = 4,
substitutionMatrix = "BLOSUM45")
head(ath_aly_crbh.kaks)
library(CRBHits)
devtools::build_vignettes()
pkgdown::build_site()
library(CRBHits)
devtools::build_vignettes()
pkgdown::build_site()
library(CRBHits)
pkgdown::build_site()
devtools::build_vignettes()
pkgdown::build_site()
