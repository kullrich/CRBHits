length(which(!duplicated(apply(rbh1[, 1:2], 1, function(x) paste0(sort(x), collapse="\t")))))
rbh2.dedup <- rbh2[!duplicated(apply(rbh2[, 1:2], 1, function(x) paste0(sort(x), collapse="\t"))), , drop = FALSE]
rbh1.dedup <- rbh1[!duplicated(apply(rbh1[, 1:2], 1, function(x) paste0(sort(x), collapse="\t"))), , drop = FALSE]
dim(rbh1.dedup)
dim(rbh2.dedup)
fitSpline <- function(alnlength, evalue){
log10evalue <- -log10(evalue)
log10evalue[is.infinite(log10evalue)] <- 324
x <- cbind(alnlength, log10evalue)
x <- x[order(x[,1]),]
x.max <- max(x[,1])
fitMatrix <- matrix(0, ncol = 2, nrow = x.max)
for(i in seq(from =1, to=x.max)){
fitMatrix[i, 1] <- i
s <- round(i * 0.1)
if(s < 5){s <- 5}
smin <- i - s
smax <- i + s
s.idx <- which(x[,1] >= smin & x[,1] <= smax)
if(length(s.idx) == 0){s.mean <- 0}
if(length(s.idx) != 0){s.mean <- mean(x[s.idx, 2])}
if(i == 1){
fitMatrix[i, 2] <- s.mean
}
if(i > 1){
if(fitMatrix[i-1, 2] <= s.mean){
fitMatrix[i, 2] <- s.mean
}
if(fitMatrix[i-1, 2] > s.mean){
fitMatrix[i, 2] <- fitMatrix[i-1, 2]
}
}
}
fitMatrixfun <- splinefun(fitMatrix[,1], fitMatrix[,2])
return(fitMatrixfun)
}
selfblast <- FALSE
if(any(cds1 == cds2)){
selfblast <- TRUE
}
slefblast
selfblast
aa1file <- tempfile("aa1_", outpath)
aa2file <- tempfile("aa2_", outpath)
aa1dbfile <- tempfile("aa1db_", outpath)
aa2dbfile <- tempfile("aa2db_", outpath)
aa2_aa1_lastout <- tempfile("aa2_aa1_lastout_", outpath)
aa1_aa2_lastout <- tempfile("aa1_aa2_lastout_", outpath)
Biostrings::writeXStringSet(cds2aa(cds1), file = aa1file)
Biostrings::writeXStringSet(cds2aa(cds2), file = aa2file)
system(paste0(lastpath, "lastdb -p -cR01 -P ", threads," ", aa1dbfile, " ", aa1file))
system(paste0(lastpath, "lastdb -p -cR01 -P ", threads," ", aa2dbfile, " ", aa2file))
system(paste0(lastpath, "lastal -f BlastTab+ -P ", threads, " ", aa1dbfile, " ", aa2file, " > ", aa2_aa1_lastout))
system(paste0(lastpath, "lastal -f BlastTab+ -P ", threads, " ", aa2dbfile, " ", aa1file, " > ", aa1_aa2_lastout))
aa1_aa2 <- read.table(aa1_aa2_lastout, sep = "\t", header = FALSE, stringsAsFactors = FALSE)
aa2_aa1 <- read.table(aa2_aa1_lastout, sep = "\t", header = FALSE, stringsAsFactors = FALSE)
colnames(aa1_aa2) <- colnames(aa2_aa1) <- c("query_id", "subject_id", "perc_identity",
"alignment_length", "mismatches",
"gap_opens", "q_start", "q_end",
"s_start", "s_end", "evalue",
"bit_score", "query_length",
"subject_length", "raw_score")
if(selfblast){
aa1_aa2 <- aa1_aa2[aa1_aa2[,1] != aa1_aa2[,2], , drop = FALSE]
aa2_aa1 <- aa2_aa1[aa2_aa1[,1] != aa2_aa1[,2], , drop = FALSE]
}
aa1_aa2 <- aa1_aa2 %>% filter.eval(evalue) %>% filter.qcov(qcov) %>%
filter.tcov(tcov) %>% filter.pident(pident) %>%
filter.alnlen(alnlen)
aa2_aa1 <- aa2_aa1 %>% filter.eval(evalue) %>% filter.qcov(qcov) %>%
filter.tcov(tcov) %>% filter.pident(pident) %>%
filter.alnlen(alnlen)
aa1_aa2.idx <- paste0(aa1_aa2[, 1], "\t", aa1_aa2[, 2])
aa2_aa1.idx <- paste0(aa2_aa1[, 2], "\t", aa2_aa1[, 1])
#deduplicate hit pairs and only retain the best hit per query
aa1_aa2.dedup <- aa1_aa2[!duplicated(aa1_aa2[, 1]), , drop = FALSE]
aa2_aa1.dedup <- aa2_aa1[!duplicated(aa2_aa1[, 1]), , drop = FALSE]
aa1_aa2.dedup.idx <- paste0(aa1_aa2.dedup[, 1], "\t", aa1_aa2.dedup[, 2])
aa2_aa1.dedup.idx <- paste0(aa2_aa1.dedup[, 2], "\t", aa2_aa1.dedup[, 1])
#reduce to reciprocal best hits
rbh1 <- aa1_aa2.dedup[which(aa1_aa2.dedup.idx %in% aa2_aa1.dedup.idx), , drop = FALSE]
rbh2 <- aa2_aa1.dedup[which(aa2_aa1.dedup.idx %in% aa1_aa2.dedup.idx), , drop = FALSE]
if(selfblast){
rbh1 <- rbh1[!duplicated(apply(rbh1[, 1:2], 1, function(x) paste0(sort(x), collapse="\t"))), , drop = FALSE]
rbh2 <- rbh2[!duplicated(apply(rbh2[, 1:2], 1, function(x) paste0(sort(x), collapse="\t"))), , drop = FALSE]
}
dim(rbh1)
if(!selfblast){
rbh1_rbh2_fit <- fitSpline(c(rbh1[,4], rbh2[,4]), c(rbh1[,11], rbh2[,11]))
}
if(selfblast){
rbh1_rbh2_fit <- fitSpline(c(rbh1[,4]), c(rbh1[,11]))
}
rbh1_rbh2_fit
filter.crbh <- function(x){
minuslog10evalue_by_fit <- lapply(as.numeric(x[,4]), rbh1_rbh2_fit)
return(x[as.numeric(x[,16]) >= minuslog10evalue_by_fit, , drop = FALSE])
}
rbh1.idx <- paste0(rbh1[, 1], "\t", rbh1[, 2])
rrbh1.dedup
rbh1.idx
rbh2.idx <- paste0(rbh2[, 2], "\t", rbh2[, 1])
if(!selfblast){
rbh1.idx <- paste0(rbh1[, 1], "\t", rbh1[, 2])
rbh2.idx <- paste0(rbh2[, 2], "\t", rbh2[, 1])
}
if(selfblast){
rbh1.idx <- c(paste0(rbh1[, 1], "\t", rbh1[, 2]), paste0(rbh1[, 2], "\t", rbh1[, 1]))
rbh2.idx <- c(paste0(rbh2[, 2], "\t", rbh2[, 1]), paste0(rbh2[, 1], "\t", rbh2[, 2]))
}
aa1_aa2.red <- aa1_aa2[!aa1_aa2.idx %in% rbh1.idx, , drop = FALSE]
aa2_aa1.red <- aa2_aa1[!aa2_aa1.idx %in% rbh2.idx, , drop = FALSE]
dim(aa1_aa2.red)
dim(aa2_aa1.red)
#add -log10(evalue)
aa1_aa2.red <- cbind(aa1_aa2.red, -log10(aa1_aa2.red[,11]))
aa1_aa2.red[is.infinite(aa1_aa2.red[, 16]), 16] <- 324
aa2_aa1.red <- cbind(aa2_aa1.red, -log10(aa2_aa1.red[,11]))
aa2_aa1.red[is.infinite(aa2_aa1.red[, 16]), 16] <- 324
#filter retained hit pairs with rbh1_rbh2_fit
aa1_aa2.red <- filter.crbh(aa1_aa2.red)
aa2_aa1.red <- filter.crbh(aa2_aa1.red)
aa1_aa2.red.idx <- paste0(aa1_aa2.red[, 1], "\t", aa1_aa2.red[, 2])
aa2_aa1.red.idx <- paste0(aa2_aa1.red[, 2], "\t", aa2_aa1.red[, 1])
dim(aa1_aa2.red)
aa1_aa2.red.dedup <- aa1_aa2.red[!duplicated(aa1_aa2.red.idx), , drop = FALSE]
aa2_aa1.red.dedup <- aa2_aa1.red[!duplicated(aa2_aa1.red.idx), , drop = FALSE]
aa1_aa2.red.dedup.idx <- paste0(aa1_aa2.red.dedup[, 1], "\t", aa1_aa2.red.dedup[, 2])
aa2_aa1.red.dedup.idx <- paste0(aa2_aa1.red.dedup[, 2], "\t", aa2_aa1.red.dedup[, 1])
rbh1.sec <- aa1_aa2.red.dedup[which(aa1_aa2.red.dedup.idx %in% aa2_aa1.red.dedup.idx), , drop = FALSE]
rbh2.sec <- aa2_aa1.red.dedup[which(aa2_aa1.red.dedup.idx %in% aa1_aa2.red.dedup.idx), , drop = FALSE]
dim(rbh1.sec)
if(selfblast){
rbh1.sec <- rbh1.sec[!duplicated(apply(rbh1.sec[, 1:2], 1, function(x) paste0(sort(x), collapse="\t"))), , drop = FALSE]
rbh2.sec <- rbh2.sec[!duplicated(apply(rbh2.sec[, 1:2], 1, function(x) paste0(sort(x), collapse="\t"))), , drop = FALSE]
}
dim(rbh1.sec)
single1 <- aa1_aa2.red.dedup[which(!aa1_aa2.red.dedup.idx %in% aa2_aa1.red.dedup.idx), , drop = FALSE]
single2 <- aa2_aa1.red.dedup[which(!aa2_aa1.red.dedup.idx %in% aa1_aa2.red.dedup.idx), , drop = FALSE]
dim(singl1)
dim(single1)
dim(single2)
single1
single2
len <- rbh1[, 4]
log10alnlen <- log10(len)
minuslog10evalue <- -log10(rbh1[, 11])
minuslog10evalue[is.infinite(minuslog10evalue)] <- 324
par(mfrow=c(2,1))
plot(log10alnlen, minuslog10evalue, pch = 20, main = "Accept / Reject secondary hits as homologs", ylab = "-log10(evalue)", xlab = "log10(alnlength)")
points(x= log10(1:max(rbh1[, 4])), y=rbh1_rbh2_fit(seq(from=1, to=max(rbh1[, 4]))), type = "l", col = "blue")
points(log10(rbh1.sec[, 4]), -log10(rbh1.sec[, 11]), pch = 20, col = "red")
points(log10(single1[, 4]), -log10(single1[, 11]), pch = 20, col = "orange")
if(selfblast){
legend("bottomright", legend = c("rbh", "sec", "single"), col = c("black", "red", "orange"), pch = 20)
}
if(!selfblast){
points(log10(single2[, 4]), -log10(single2[, 11]), pch = 20, col = "cyan")
legend("bottomright", legend = c("rbh", "sec", "single1", "single2"), col = c("black", "red", "orange", "cyan"), pch = 20)
}
library(CRBHits)
library(CRBHits)
make.last()
?cds2rbh
data("ath", package="CRBHits")
data("aly", package="CRBHits")
#conditional-reciprocal best hits
ath_aly_crbh <- cds2rbh(ath, aly, plotCurve = TRUE)
ath_selfblast_crbh <- cds2rbh(ath, ath, plotCurve = TRUE)
?cdsfile2rbh
athfile <- system.file("fasta","ath.cds.fasta.gz",package = "CRBHits")
alyfile <- system.file("fasta","aly.cds.fasta.gz",package = "CRBHits")
#conditional-reciprocal best hits
ath_aly_crbh <- cdsfile2rbh(athfile, alyfile, plotCurve = TRUE)
library(CRBHits)
make.last()
?cdsfile2rbh
athfile <- system.file("fasta","ath.cds.fasta.gz",package = "CRBHits")
alyfile <- system.file("fasta","aly.cds.fasta.gz",package = "CRBHits")
#conditional-reciprocal best hits
ath_aly_crbh <- cdsfile2rbh(athfile, alyfile, plotCurve = TRUE)
ath_selfblast_crbh <- cdsfile2rbh(athfile, athfile, plotCurve = TRUE)
library(CRBHits)
athfile <- "ftp://ftp.ensemblgenomes.org/pub/plants/release-47/fasta/arabidopsis_thaliana/cds/Arabidopsis_thaliana.TAIR10.cds.all.fa.gz"
ath_selfblast_crbh <- cdsfile2rbh(athfile, athfile, rost1999 = TRUE, qcov = 0.5, threads = 4, plotCurve = TRUE)
make.last()
library(CRBHits)
?cds2kaks
data("ath", package="CRBHits")
data("aly", package="CRBHits")
##select a sequence pair according to a best hit pair (done for you)
cds1 <- ath[1]
cds2 <- aly[282]
cds2kaks(cds1, cds2, model = "Li")
data("ath", package="CRBHits")
data("aly", package="CRBHits")
##select a sequence pair according to a best hit pair (done for you)
cds1 <- ath[1]
cds2 <- aly[282]
cds2kaks(cds1, cds2, model = "YN")
make.last()
?cds2kaks
library(CRBHits)
make.last()
make.KaKs_Calculator2()
?cds2kaks
data("ath", package="CRBHits")
data("aly", package="CRBHits")
##select a sequence pair according to a best hit pair (done for you)
cds1 <- ath[1]
cds2 <- aly[282]
cds2kaks(cds1, cds2, model = "Li")
## Not run:
cds2kaks(cds1, cds2, model = "YN")
library(CRBHits)
library(CRBHits)
library(pkgdown)
pkgdown::build_site()
devtools::build_vignettes()
get_pident_by_length <- function(x){
if(x <= 11){return(100)}
if(x <= 450){return(480*(x^(-0.32*(1+(exp(-x/1000))))))}
if(x > 450){return(19.5)}
}
plot(x = seq(from = 0, to = 1000), y = curve(get_pident_by_length, 0, 1000), pch = 20,
main = "expected protein identity by Rost B. (19999) equation 2")
get_pident_by_length(100)
get_pident_by_length(1:10)
?curve
get_pident_by_length <- function(x){
eq2 <- function(x){
if(x <= 11){return(100)}
if(x <= 450){return(480*(x^(-0.32*(1+(exp(-x/1000))))))}
if(x > 450){return(19.5)}
}
return(lapply(x, eq2))
}
get_pident_by_length(0)
get_pident_by_length <- function(x){
eq2 <- function(x){
if(x <= 11){return(100)}
if(x <= 450){return(480*(x^(-0.32*(1+(exp(-x/1000))))))}
if(x > 450){return(19.5)}
}
return(unlist(lapply(x, eq2)))
}
get_pident_by_length(1:100)
library(CRBHits)
get_pident_by_length <- function(x){
eq2 <- function(x){
if(x <= 11){return(100)}
if(x <= 450){return(480*(x^(-0.32*(1+(exp(-x/1000))))))}
if(x > 450){return(19.5)}
}
return(unlist(lapply(x, eq2)))
}
plot(x = seq(from = 0, to = 1000), y = curve(get_pident_by_length, 0, 1000), pch = 20,
main = "expected protein identity by Rost B. (19999) equation 2")
dev.off()
get_pident_by_length <- function(x){
eq2 <- function(x){
if(x <= 11){return(100)}
if(x <= 450){return(480*(x^(-0.32*(1+(exp(-x/1000))))))}
if(x > 450){return(19.5)}
}
return(unlist(lapply(x, eq2)))
}
plot(x = seq(from = 0, to = 1000), y = curve(get_pident_by_length, 0, 1000), pch = 20,
main = "expected protein identity by Rost B. (19999) equation 2")
get_pident_by_length(0:1000)
length(get_pident_by_length(0:1000))
length(seq(from=0,to=1000))
plot(x = seq(from = 11, to = 500), y = curve(get_pident_by_length, 11, 500), pch = 20,
main = "expected protein identity by Rost B. (19999) equation 2")
plot(x = seq(from = 11, to = 500), y = curve(get_pident_by_length, 10, 500), pch = 20,
main = "expected protein identity by Rost B. (19999) equation 2")
curve(get_pident_by_length, 10, 500, pch = 20,
main = "expected protein identity by Rost B. (19999) equation 2")
curve(get_pident_by_length, 11, 500, pch = 20,
main = "expected protein identity (eq2; Rost B. 19999)")
curve(get_pident_by_length, 11, 500, pch = 20, xlab = "alignment length", ylab = "pident",
main = "expected protein identity (eq2; Rost B. 19999)")
library(CRBHits)
?cdsfile2rbh
pkgdown::build_site()
pkgdown::build_site()
library(CRBHits)
?rbh2kaks
library(CRBHits)
tmp.paths<-make.vignette()
tmp.paths
library(CRBHits)
make.last()
library(CRBHits)
make.last()
make.KaKs_Calculator2()
pkgdown::build_site()
?cdsfile2aafile
?cds2aa
system.file("fasta/ath.cds.fasta.gz", package = "CRBHits")
cdsfile <- system.file("fasta/ath.cds.fasta.gz", package = "CRBHits")
cds <- Biostrings::readDNAStringSet(cdsfile)
cds
width(cds) %% 3
width(cds) %% 3 == 0
any(width(cds) %% 3 == 0)
cds1
?tryCatch
suppressWarnings(any(cds1==cds2))
cds1
a<-"aaa"
class(a)
library(CRBHits)
make.last()
make.KaKs_Calculator2()
devtools::build_vignettes()
cdsfile <- system.file("fasta/ath.cds.fasta.gz", package = "CRBHits")
cds <- Biostrings::readDNAStringSet(cdsfile)
cds
width(cds)
Biostrings::width(cds)
devtools::build_vignettes()
getwd()
library(CRBHits)
?cds2rbh
data("ath", package="CRBHits")
data("aly", package="CRBHits")
#conditional-reciprocal best hits
ath_aly_crbh <- cds2rbh(ath, aly, plotCurve = TRUE)
dim(ath_aly_crbh$crbh.pairs)
ath_aly_crbh$crbh1
library(ggplot2)
ath_aly_crbh$crbh1
str(ath_aly_crbh$crbh1)
ggplot(data=ath_aly_crbh$crbh1, aes(-log10(evalue), alignment_length))
ggplot(data=ath_aly_crbh$crbh1, aes(-log10(evalue), alignment_length, color = "black"))
ggplot(data=ath_aly_crbh$crbh1, aes(-log10(evalue), alignment_length, color = "black")) + geom_point()
ggplot(data=ath_aly_crbh$crbh1, aes(y = -log10(evalue), x = alignment_length))
ggplot(data=ath_aly_crbh$crbh1, aes(y = -log10(evalue), x = alignment_length)) + geom_point()
ggplot(data=ath_aly_crbh$crbh1, aes(y = -log10(evalue), x = log10(alignment_length))) + geom_point()
ggplot(data=ath_aly_crbh$crbh1, aes(y = -log10(evalue), x = log10(alignment_length))) + geom_point()+geom_smooth()
ggplotly(ggplot(mpg, aes(displ,log(hwy),color=class)) + (  geom_point())
ggplotly(ggplot(mpg, aes(displ,log(hwy),color=class)) + geom_point())
loess(-log10(evalue) ~ log10(alignment_length), data = ath_aly_crbh$crbh1)
loess(-log10(evalue) ~ log10(alignment_length), data = ath_aly_crbh$crbh1, na.action = na.rm)
loess(-log10(evalue) ~ log10(alignment_length), data = ath_aly_crbh$crbh1, na.action = "rm")
loess(-log10(evalue) ~ log10(alignment_length), data = ath_aly_crbh$crbh1, na.action = NA)
?loess
getOption("na.action")
na.omit
getOption("na.action")
loess(-log10(evalue) ~ log10(alignment_length), data = ath_aly_crbh$crbh1, na.action = "na.omit")
f<-function(x){return(325)}
loess(-log10(evalue) ~ log10(alignment_length), data = ath_aly_crbh$crbh1, na.action = f)
new<-ath_aly_crbh$crbh1
new
colnames(new)
is.infinite(log10(new$evalue))
which(is.infinite(log10(new$evalue)))
new$evalue[which(is.infinite(log10(new$evalue)))]
1e-324
new$evalue[which(is.infinite(log10(new$evalue)))]<-1e-324
new$evalue
log10(new$evalue)
new<-cbind(new,-log10(new$eval))
colnames(new)
new<-ath_aly_crbh$crbh1
new<-cbind(new,minuslog10evalue = -log10(new$eval))
colnames(new)
new$minuslog10evalue[is.infinite(new$minuslog10evalue)]<-324
ggplot(data=new, aes(y = minuslog10evalue, x = log10(alignment_length))) + geom_point()+geom_smooth()
library(CRBHits)
?cds2rbh
data("ath", package="CRBHits")
data("aly", package="CRBHits")
#conditional-reciprocal best hits
ath_aly_crbh <- cds2rbh(ath, aly, plotCurve = TRUE)
make.last()
data("ath", package="CRBHits")
data("aly", package="CRBHits")
#conditional-reciprocal best hits
ath_aly_crbh <- cds2rbh(ath, aly, plotCurve = TRUE)
new<-ath_aly_crbh$crbh1
ggplot(data=new, aes(y = minuslog10evalue, x = log10(alignment_length))) + geom_point()+geom_smooth()
new<-cbind(new,minuslog10evalue = -log10(new$eval))
new$minuslog10evalue[is.infinite(new$minuslog10evalue)]<-324
ggplot(data=new, aes(y = minuslog10evalue, x = log10(alignment_length))) + geom_point()+geom_smooth()
ath_aly_crbh$rbh1_rbh2_fit(1)
ath_aly_crbh$rbh1_rbh2_fit(100)
ath_aly_crbh$rbh1_rbh2_fit(1000)
points(x = log10(1:3000), y = ath_aly_crbh$rbh1_rbh2_fit(seq(from=1, to=3000)))
points(x = log10(1:3000), y = ath_aly_crbh$rbh1_rbh2_fit(seq(from=1, to=3000)), type = l)
geom_point(x = log10(1:3000), y = ath_aly_crbh$rbh1_rbh2_fit(seq(from=1, to=3000)))
ggplot(data=new, aes(y = minuslog10evalue, x = log10(alignment_length))) + geom_point()+geom_smooth()+geom_point(x = log10(1:3000), y = ath_aly_crbh$rbh1_rbh2_fit(seq(from=1, to=3000)))
plot(log10(new$alignment_length), new$minuslog10evalue)
dev.off()
plot(log10(new$alignment_length), new$minuslog10evalue, pch = 20)
points(x = log10(1:3000), y = ath_aly_crbh$rbh1_rbh2_fit(seq(from=1, to=3000)), type = l)
points(x = log10(1:3000), y = ath_aly_crbh$rbh1_rbh2_fit(seq(from=1, to=3000)), type = "l", col = "blue")
points(x = log10(1:3000), y = ath_aly_crbh$rbh1_rbh2_fit(seq(from=1, to=3000)), type = "l", col = "blue", lwd = 2)
loess(new$minuslog10evalue ~ new$alignment_length)
curve(loess(new$minuslog10evalue ~ new$alignment_length), add = TRUE, col = "red")
lines(loess(new$minuslog10evalue ~ new$alignment_length), add = TRUE, col = "red")
lines(loess(new$minuslog10evalue ~ new$alignment_length), col = "red")
lines(loess(new$minuslog10evalue ~ new$alignment_length), col = "red")
line(loess(new$minuslog10evalue ~ new$alignment_length), col = "red")
lw<-loess(new$minuslog10evalue ~ new$alignment_length)
lw
lw$n
lw$y
lw$x
points(x = lw$x, y = lw$y, col = "red", lwd = 2)
points(x = lw$x, y = lw$y, col = "red", lwd = 2)
points(x = lw$x, y = lw$y, col = "red", lwd = 2)
plot(log10(new$alignment_length), new$minuslog10evalue, pch = 20)
dev.off()
plot(log10(new$alignment_length), new$minuslog10evalue, pch = 20)
points(x = lw$x, y = lw$y, col = "red", lwd = 2)
lw$x
lw$xlw$y
lw$y
points(x = log10(lw$x), y = lw$y, col = "red", lwd = 2)
lw$fitted
plot(log10(new$alignment_length), new$minuslog10evalue, pch = 20)
points(x = log10(lw$x), y = lw$fitted, col = "red", lwd = 2)
points(x = log10(lw$x), y = lw$fitted, col = "red", lwd = 2, type = "l")
points(x = log10(lw$x), y = lw$fitted, col = "red", lwd = 2, type = "h")
points(x = log10(lw$x), y = lw$fitted, col = "red", lwd = 2, type = "b")
plot(log10(new$alignment_length), new$minuslog10evalue, pch = 20)
points(x = log10(lw$x), y = lw$fitted, col = "red", lwd = 2, type = "b")
plot(log10(new$alignment_length), new$minuslog10evalue, pch = 20)
points(x = log10(lw$x), y = lw$fitted, col = "red", lwd = 2, type = "l")
plot(log10(new$alignment_length), new$minuslog10evalue, pch = 20)
points(x = log10(lw$x), y = lw$fitted, col = "red", lwd = 2, pch = 20)
points(x = log10(1:3000), y = ath_aly_crbh$rbh1_rbh2_fit(seq(from=1, to=3000)), type = "l", col = "blue", lwd = 2)
ath_aly_crbh$rbh1_rbh2_fit(1000)
lw
lw(100)
predict(lw)
predict(lw)
predict(lw)
predict(lw)
predict(lw)
predict(lw)
predict(lw)
?loess
fitSpline
lw
lw
lw$residuals
lw$enp
lw$s
lw$one.delta
lw$two.delta
lw$terms
lw
ath_aly_crbh$rbh1_rbh2_fit()
ath_aly_crbh$rbh1_rbh2_fit
splinefun(lw$x,lw$y)
length(lw$x)
length(unique(lw$x))
length(lw$x)
lw$x
length(unique(lw$x))
splinefun(lw$x,lw$y)
new<-splinefun(lw$x,lw$y)
new(0)
new(100)
new(1000)
new(000)
new(10)
new(20)
new(30)
new(40)
new(50)
lw$s
lw$x
lw$y
points(x = log10(1:3000), y = new(seq(from=1, to=3000)), type = "l", col = "green", lwd = 2)
log10(2)
log10(20)
log10(30)
log10(35)
log10(40)
log10(50)
log10(150)
log10(100)
log10(80)
dev.off()
plot(log10(new$alignment_length), new$minuslog10evalue, pch = 20)
new
library(CRBHits)
?cds2aa
?cds2codonaln
cds1 <- Biostrings::DNAString("ATGCAACATTGC")
cds2 <- Biostrings::DNAString("ATGCATTGC")
cds2codonaln(cds1, cds2)
cds2codonaln(cds1,cds2)
kaks(dnastring2aln(cds2codonaln(cds1,cds2)))
seqinr::kaks(dnastring2aln(cds2codonaln(cds1,cds2)))
?cds2rbh
data("ath", package="CRBHits")
data("aly", package="CRBHits")
#conditional-reciprocal best hits
ath_aly_crbh <- cds2rbh(ath, aly, plotCurve = TRUE)
?cds2codonaln
cds1 <- Biostrings::DNAString("ATGCAACATTGC")
cds2 <- Biostrings::DNAString("ATGCATTGC")
cds1
cds2
cds2codonaln(cds1, cds2)
seqinr::kaks(dnastring2aln(cds2codonaln(cds1, cds2)))
