data("ath", package="CRBHits")
data("aly", package="CRBHits")
cds2rbh(ath, aly)
paste0(find.package("CRBHits"),
"/extdata/last-1060/src/")
dir.exists(paste0(find.package("CRBHits"),
"/extdata/last-1060/src/"))
setwd(paste0(find.package("CRBHits"), "/extdata/"))
system(paste0("unzip last-1060.zip"))
setwd(paste0(find.package("CRBHits"), "/extdata/last-1060/"))
system("make")
data("ath", package="CRBHits")
data("aly", package="CRBHits")
cds2rbh(ath,aly)
ath
aly
cds2rbh(ath,aly)
cds2rbh(ath,aly,plotCurve=TRUE)
?cds2rbh
cds2rbh
library(CRBHits)
setwd(paste0(find.package("CRBHits"), "/extdata/"))
system(paste0("unzip last-1060.zip"))
setwd(paste0(find.package("CRBHits"), "/extdata/last-1060/"))
system("make")
data("ath", package="CRBHits")
data("aly", package="CRBHits")
cds2rbh(ath,aly,plotCurve = TRUE)
dev.off()
cds2rbh(ath,aly,plotCurve = TRUE)
cds2rbh(ath,aly,remove=FALSE)
cds2rbh(ath,aly,remove=FALSE,plotCurve = T)
library(CRBHits)
setwd(paste0(find.package("CRBHits"), "/extdata/"))
system(paste0("unzip last-1060.zip"))
setwd(paste0(find.package("CRBHits"), "/extdata/last-1060/"))
system("make")
setwd(paste0(find.package("CRBHits"), "/extdata/"))
system(paste0("tar -xvf KaKs_Calculator2.0.tar.gz"))
setwd(paste0(find.package("CRBHits"), "/extdata/KaKs_Calculator2.0/src/"))
system("make clean")
system("make")
data("ath", package="CRBHits")
data("aly", package="CRBHits")
test<-cds2rbh(ath,aly)
test
test$crbh.pairs
dim(test$crbh.pairs)
test<-cds2rbh(ath,aly,crbh = F)
dim(test$crbh.pairs)
dim(test$rbh.pairs)
library(CRBHits)
setwd(paste0(find.package("CRBHits"), "/extdata/"))
system(paste0("unzip last-1060.zip"))
setwd(paste0(find.package("CRBHits"), "/extdata/last-1060/"))
system("make")
data("ath", package="CRBHits")
data("aly", package="CRBHits")
cds2rbh(ath,aly)
cds2rbh(ath,aly,plotCurve = TRUE)
ath_aly_rbh <- cds2rbh(ath, aly, crbh = FALSE)
ath_aly_crbh.rost1999 <- cds2rbh(ath, aly, filter = c("filter.eval", "filter.rost1999"))
dim(ath_aly_crbh.rost1999)
dim(ath_aly_crbh)
ath_aly_rbh <- cds2rbh(ath, aly, crbh = FALSE)
dim(ath_aly_rbh)
ath_aly_rbh$rbh.pairs
dim(ath_aly_rbh$rbh.pairs)
dim(ath_aly_crbh.rost1999$crbh.pairs)
ath_aly_crbh <- cds2rbh(ath, aly)
dim(ath_aly_crbh$crbh.pairs)
ath_aly_crbh.rost1999 <- cds2rbh(ath, aly, filter = c("filter.rost1999"))
dim(ath_aly_crbh.rost1999$crbh.pairs)
ath_aly_rbh <- cds2rbh(ath, aly, crbh = FALSE)
filter.eval()
formals(filter.eval) <- alist(x= , eval=1e-3)
filter.eval
dim(ath_aly_crbh$crbh.pairs)
ath_aly_crbh <- cds2rbh(ath, aly, plotCurve = TRUE)
dim(ath_aly_crbh$crbh.pairs)
ath_aly_rbh <- cds2rbh(ath, aly, crbh = FALSE)
dim(ath_aly_rbh$rbh.pairs)
ath_aly_crbh.eval <- cds2rbh(ath, aly, filter = c("filter.eval"))
dim(ath_aly_crbh.eval$crbh.pairs)
formals(filter.eval) <- alist(x= , eval=1e-10)
ath_aly_crbh.eval <- cds2rbh(ath, aly, filter = c("filter.eval"))
dim(ath_aly_crbh.eval$crbh.pairs)
filter.eval()
formals(filter.eval) <- alist(x= , eval=1e-100)
ath_aly_crbh.eval <- cds2rbh(ath, aly, filter = c("filter.eval"))
dim(ath_aly_crbh.eval$crbh.pairs)
formals(filter.eval) <- alist(x= , eval=1e-200)
ath_aly_crbh.eval <- cds2rbh(ath, aly, filter = c("filter.eval"))
dim(ath_aly_crbh.eval$crbh.pairs)
ath_aly_crbh$crbh1
apply(ath_aly_crbh$crbh1,1,function(x){filter.eval(x, 1e-3)})
dim(ath_aly_crbh$crbh1[apply(ath_aly_crbh$crbh1,1,function(x){filter.eval(x, 1e-3)}),])
dim(ath_aly_crbh$crbh1[apply(ath_aly_crbh$crbh1,1,function(x){filter.eval(x, 1e-5)}),])
dim(ath_aly_crbh$crbh1[apply(ath_aly_crbh$crbh1,1,function(x){filter.eval(x, 1e-10)}),])
dim(ath_aly_crbh$crbh1[apply(ath_aly_crbh$crbh1,1,function(x){filter.eval(x, 1e-100)}),])
formals(CRBHits::filter.eval) <- alist(x=, eval=1e-100)
?formals
formals(filter.eval, envir = environment(CRBHits)) <- alist(x=, eval=1e-100)
CRBHits::filter.eval()
eval100<-filter.eval
eval100
formals(eval100) <- alust(x=, eval=1e-100)
formals(eval100) <- alist(x=, eval=1e-100)
eval100 <- filter.eval
formals(eval100) <- alist(x= , eval=1e-100)
ath_aly_crbh.eval <- cds2rbh(ath, aly, filter = c("eval100"))
dim(ath_aly_crbh.eval$crbh.pairs)
library(default)
?default::default
default::default(filter.eval) <- list(eval = 1e-5)
default::default(CRBHits::filter.eval) <- list(eval=1e-5)
default::default(CRBHits:::filter.eval) <- list(eval=1e-5)
rm(filter.eval)
library(CRBHits)
default::default(filter.eval) <- list(eval = 1e-5)
filter.eval()
filter.eval
ath_aly_crbh.eval <- cds2rbh(ath, aly, filter = c("filter.eval"))
dim(ath_aly_crbh.eval$crbh.pairs)
get("filter.eval")
get(CRBHits::filter.eval)
get(CRBHits::filter.eval)
CRBHits::filter.eval
filter.eval
filter.eval(eval = 0.5)
get(filter.eval(eval=0.5))
get(filter.eval(x,eval=0.5))
get("filter.eval")
get("filter.eval")
get("filter.eval",envir = namespace:CRBHits)
get("filter.eval",envir = "namespace:CRBHits")
get("filter.eval",envir = "CRBHits")
get("filter.eval",envir = CRBHits)
?get
environment()
environment(filter.pident)
environment(filter.eval)
eval(filter.eval)
get(filter.eval, envir = environment(CRBHits))
get(filter.eval, envir = environment(cds2rbh))
get(filter.eval, envir = environment(filter.eval))
get("filter.eval", envir = environment(filter.eval))
get("filter.eval", envir = environment())
filter.eval()
rm(filter.eval)
filter.eval()
filter.eval()
get("filter.eval", envir = environment())
?formals
environment(CRBHits)
environment("CRBHits")
formals(filter.eval, envir = environment("CRBHits")) <- alist(x= , eval=1e-100)
formals(filter.eval, envir = environment("filter.eval")) <- alist(x= , eval=1e-100)
filter.eval()
rm(filter.eval)
environment(filter.eval())
environment(filter.eval
)
environment(filter.eval)
formals(filter.eval, envir = CRBHits(filter.eval)) <- alist(x=, eval=1e-5)
get(filter.eval)
get(filter.eval)
library(CRBHits)
get(filter.eval)
get("filter.eval")
f_<-get("filter.eval")
f_
formals(f_)<-alist(x=,eval=1.e5)
f_
formals(f_)<-alist(x=,eval=1e-5)
f_
eval.10 <- filter.eval
formals(eval.10) <- alist(x= , eval=1e-10)
ath_aly_crbh <- cds2rbh(ath, aly, filter = c("eval.10"))
dim(ath_aly_crbh.eval$crbh.pairs)
eval.10
formals(eval.10) <- alist(x= , eval=1e-100)
eval.10
ath_aly_crbh <- cds2rbh(ath, aly, filter = c("eval.10"))
eval.10 <- filter.eval
eval.10
formals(eval.10) <- alist(x= , eval=1e-10)
ath_aly_crbh.eval <- cds2rbh(ath, aly, filter = c("eval.10"))
dim(ath_aly_crbh.eval$crbh.pairs)
ath_aly_crbh.eval <- cds2rbh(ath, aly, filter = c("eval.100"))
eval.100 <- filter.eval
formals(eval.100) <- alist(x= , eval=1e-100)
ath_aly_crbh.eval <- cds2rbh(ath, aly, filter = c("eval.100"))
dim(ath_aly_crbh.eval$crbh.pairs)
qc.50 <- filter.qcov
formals(qc.50) <- alist(x= , coverage=0.5)
ath_aly_crbh.qc.50 <- cds2rbh(ath, aly, filter = c("qc.50"))
dim(ath_aly_crbh.qc.50$crbh.pairs)
ath_aly_crbh.qc.50.eval.100 <- cds2rbh(ath, aly, filter = c("qc.50","eval.100))
ath_aly_crbh.qc.50.eval.100 <- cds2rbh(ath, aly, filter = c("qc.50","eval.100"))
dim(ath_aly_crbh.qc.50.eval.100$crbh.pairs)
ath_aly_crbh <- cds2rbh(ath, aly, plotCurve = TRUE)
save(ath_aly_crbh, file="data/ath_aly_rbh.rda")
getwd()
save(ath_aly_crbh,file="/Users/ullrich/opt/github/CRBHits/data/ath_aly_crbh.rda")
library(CRBHits)
setwd(paste0(find.package("CRBHits"), "/extdata/"))
system(paste0("unzip last-1060.zip"))
setwd(paste0(find.package("CRBHits"), "/extdata/last-1060/"))
system("make")
data("ath", package="CRBHits")
data("aly", package="CRBHits")
ath_aly_crbh <- cds2rbh(ath, aly, plotCurve = TRUE)
dim(ath_aly_crbh$crbh.pairs)
data("ath_aly_crbh", package="CRBHits")
data("ath", package="CRBHits")
data("aly", package="CRBHits")
rbh2kaks(ath_aly_crbh$crbh.pairs, ath, aly)
#
ath_aly_crbh$crbh.pairs
dim(ath_aly_crbh$crbh.pairs)
rbh2kaks <- function(rbh, cds1, cds2, threads = 1){
#internal function to get cds by name
get_cds_by_name <- function(x, cds){
return(cds[names(cds)==x])
}
names(cds1) <- unlist(lapply(strsplit(names(cds1), " "), function(x) x[1]))
names(cds2) <- unlist(lapply(strsplit(names(cds2), " "), function(x) x[1]))
registerDoMC(threads)
i <- NULL
rbh.kaks <- foreach(i = 1:dim(rbh)[1], .combine = rbind) %dopar% {
unlist(seqinr::kaks(dnastring2aln(cds2codonaln(
get_cds_by_name(rbh[i,1], cds1),
get_cds_by_name(rbh[i,2], cds2)))))
}
return(cbind(rbh, rbh.kaks))
}
rbh2kaks(ath_aly_crbh$crbh.pairs, ath, aly, threads = 4)
rbh2kaks <- function(rbh, cds1, cds2, threads = 1){
#internal function to get cds by name
get_cds_by_name <- function(x, cds){
return(cds[names(cds)==x])
}
names(cds1) <- unlist(lapply(strsplit(names(cds1), " "), function(x) x[1]))
names(cds2) <- unlist(lapply(strsplit(names(cds2), " "), function(x) x[1]))
doMC::registerDoMC(threads)
i <- NULL
rbh.kaks <- foreach::foreach(i = 1:dim(rbh)[1], .combine = rbind) %dopar% {
unlist(seqinr::kaks(dnastring2aln(cds2codonaln(
get_cds_by_name(rbh[i,1], cds1),
get_cds_by_name(rbh[i,2], cds2)))))
}
return(cbind(rbh, rbh.kaks))
}
rbh2kaks(ath_aly_crbh$crbh.pairs, ath, aly, threads = 4)
rbh2kaks <- function(rbh, cds1, cds2, threads = 1){
#internal function to get cds by name
get_cds_by_name <- function(x, cds){
return(cds[names(cds)==x])
}
names(cds1) <- unlist(lapply(strsplit(names(cds1), " "), function(x) x[1]))
names(cds2) <- unlist(lapply(strsplit(names(cds2), " "), function(x) x[1]))
doMC::registerDoMC(threads)
i <- NULL
rbh.kaks <- foreach::foreach(i = 1:dim(rbh)[1], .combine = rbind) foreach::`%dopar%` {
unlist(seqinr::kaks(dnastring2aln(cds2codonaln(
get_cds_by_name(rbh[i,1], cds1),
get_cds_by_name(rbh[i,2], cds2)))))
}
return(cbind(rbh, rbh.kaks))
}
rbh2kaks <- function(rbh, cds1, cds2, threads = 1){
#internal function to get cds by name
get_cds_by_name <- function(x, cds){
return(cds[names(cds)==x])
}
names(cds1) <- unlist(lapply(strsplit(names(cds1), " "), function(x) x[1]))
names(cds2) <- unlist(lapply(strsplit(names(cds2), " "), function(x) x[1]))
doMC::registerDoMC(threads)
i <- NULL
rbh.kaks <- foreach::foreach(i = 1:dim(rbh)[1], .combine = rbind) foreach::%dopar% {
unlist(seqinr::kaks(dnastring2aln(cds2codonaln(
get_cds_by_name(rbh[i,1], cds1),
get_cds_by_name(rbh[i,2], cds2)))))
}
return(cbind(rbh, rbh.kaks))
}
library(foreach)
rbh2kaks <- function(rbh, cds1, cds2, threads = 1){
#internal function to get cds by name
get_cds_by_name <- function(x, cds){
return(cds[names(cds)==x])
}
names(cds1) <- unlist(lapply(strsplit(names(cds1), " "), function(x) x[1]))
names(cds2) <- unlist(lapply(strsplit(names(cds2), " "), function(x) x[1]))
doMC::registerDoMC(threads)
i <- NULL
rbh.kaks <- foreach::foreach(i = 1:dim(rbh)[1], .combine = rbind) %dopar% {
unlist(seqinr::kaks(dnastring2aln(cds2codonaln(
get_cds_by_name(rbh[i,1], cds1),
get_cds_by_name(rbh[i,2], cds2)))))
}
return(cbind(rbh, rbh.kaks))
}
rbh2kaks(ath_aly_crbh$crbh.pairs, ath, aly, threads = 4)
library(CRBHits)
setwd(paste0(find.package("CRBHits"), "/extdata/"))
system(paste0("unzip last-1060.zip"))
setwd(paste0(find.package("CRBHits"), "/extdata/last-1060/"))
system("make")
setwd(paste0(find.package("CRBHits"), "/extdata/"))
system(paste0("tar -xvf KaKs_Calculator2.0.tar.gz"))
setwd(paste0(find.package("CRBHits"), "/extdata/KaKs_Calculator2.0/src/"))
system("make clean")
system("make")
?rbh2kaks.YN
data("ath", package="CRBHits")
data("aly", package="CRBHits")
##load example conditional-reciprocal best hit pair results
data("ath_aly_crbh", package="CRBHits")
ath_aly_crbh.kaks.YN <- rbh2kaks(ath_aly_crbh$crbh.pairs, ath, aly, threads = 4)
head(ath_aly_crbh.kaks.YN)
?rbh2kaks
ath_aly_crbh.kaks <- rbh2kaks(ath_aly_crbh$crbh.pairs, ath, aly,threads = 4)
cor.test(ath_aly_crbh.kaks$ka,ath_aly_crbh.kaks.YN$ka)
plot(ath_aly_crbh.kaks$ka,ath_aly_crbh.kaks.YN$ka)
plot(ath_aly_crbh.kaks$ks,ath_aly_crbh.kaks.YN$ks)
plot(ath_aly_crbh.kaks.YN$ks,ath_aly_crbh.kaks.YN$ka)
plot(ath_aly_crbh.kaks$ks,ath_aly_crbh.kaks$ka)
head(ath_aly_crbh.kaks)
head(ath_aly_crbh.kaks.YN)
library(CRBHits)
setwd(paste0(find.package("CRBHits"), "/extdata/"))
system(paste0("tar -xvf KaKs_Calculator2.0.tar.gz"))
setwd(paste0(find.package("CRBHits"), "/extdata/KaKs_Calculator2.0/src/"))
system("make clean")
system("make")
data("ath", package="CRBHits")
data("aly", package="CRBHits")
data("ath_aly_crbh", package="CRBHits")
ath_aly_crbh.kaks.YN <- rbh2kaks.YN(ath_aly_crbh$crbh.pairs, ath, aly, threads = 4)
head(ath_aly_crbh.kaks.YN )
head(ath_aly_crbh.kaks.YN)
head(ath_aly_crbh.kaks.YN,20)
names(ath)=="AT1G01010.1"
ath[names(ath)=="AT1G01010.1"]
ath
cds1<-ath
cds2<-aly
names(cds1) <- unlist(lapply(strsplit(names(cds1), " "), function(x) x[1]))
names(cds2) <- unlist(lapply(strsplit(names(cds2), " "), function(x) x[1]))
cds1[names(cds1)=="AT1G01010.1"]
n1<-cds1[names(cds1)=="AT1G01010.1"]
n2<-cds2[names(cds2)=="AL1G11530.t1"]
n1
n2
nnn<-cds2codonaln(n1,n2)
nnn
dnastring2aln(nnn)
kaks(dnastring2aln(nnn))
seqinr::kaks(dnastring2aln(nnn))
tmp <- tempfile()
Biostrings::write.phylip(Biostrings::DNAMultipleAlignment(nnn)))
Biostrings::write.phylip(Biostrings::DNAMultipleAlignment(nnn))
Biostrings::write.phylip(Biostrings::DNAMultipleAlignment(nnn),tmp)
system(paste0(kakscalcpath, "AXTConvertor ", tmp, " ", tmp, ".axt"), ignore.stdout = TRUE, ignore.stderr = TRUE)
kakscalcpath = paste0(find.package("CRBHits"),
"/extdata/KaKs_Calculator2.0/src/")
system(paste0(kakscalcpath, "AXTConvertor ", tmp, " ", tmp, ".axt"), ignore.stdout = TRUE, ignore.stderr = TRUE)
system(paste0(kakscalcpath, "KaKs_Calculator -i ", tmp, ".axt -o ", tmp, " -m YN"), ignore.stdout = TRUE, ignore.stderr = TRUE)
out <- unlist(strsplit(readLines(tmp)[2], "\t"))
out
tmp
readLines(tmp)
Biostrings::write.phylip(Biostrings::DNAMultipleAlignment(nnn),file=tmp)
readLines(tmp)
system(paste0(kakscalcpath, "AXTConvertor ", tmp, " ", tmp, ".axt"), ignore.stdout = FALSE, ignore.stderr = FALSE)
readLines(tmp)
tmp
readLines(paste0(tmp,".axt"))
system(paste0(kakscalcpath, "KaKs_Calculator -i ", tmp, ".axt -o ", tmp, ".YN -m YN"), ignore.stdout = FALSE, ignore.stderr = FALSE)
nnn
readLines(paste0(tmp,".axt"))
readLines(paste0(tmp,".axt"))[2]
nchar(readLines(paste0(tmp,".axt"))[2])
nchar(readLines(paste0(tmp,".axt"))[3])
nchar(readLines(paste0(tmp,".axt"))[2])
nchar(readLines(paste0(tmp,".axt"))[3])
nchar(readLines(paste0(tmp,".axt"))[3])
nchar(readLines(paste0(tmp,".axt"))[4])
nchar(readLines(paste0(tmp,".axt"))[2])
nnn
1407/3
Biostrings::DNAMultipleAlignment(nnn)
?write.phylip
Biostrings::write.phylip(Biostrings::DNAMultipleAlignment(nnn),file=tmp)
readLines(tmp)
paste0(tmp,".axt")
readLines(paste0(tmp,".axt"))
sink(tmp)
sink(NULL)
names(nnn)
paste0(names(nnn),collapse="&")
as.character(nnn[1])
as.character(nnn[2])
sink(tmp)
paste0(names(nnn),collapse="&")
as.character(nnn[1])
as.character(nnn[2])
sink(NULL)
readLines(tmp)
as.character(nnn[2][[1]])
sink(tmp)
paste0(names(nnn),collapse="&")
as.character(nnn[1][[1]])
as.character(nnn[2][[1]])
sink(NULL)
readLines(tmp)
sink(tmp)
cat(paste0(names(nnn),collapse="&"))
cat(as.character(nnn[1][[1]]))
cat(as.character(nnn[2][[1]]))
sink(NULL)
readLines(tmp)
sink(tmp)
cat(as.character(nnn[2][[1]]),"\n",sep="")
cat(as.character(nnn[1][[1]]),"\n",sep="")
cat(as.character(nnn[2][[1]]),"\n",sep="")
sink(NULL)
sink(tmp)
cat(paste0(names(nnn),collapse="&"),"\n",sep="")
cat(as.character(nnn[1][[1]]),"\n",sep="")
cat(as.character(nnn[2][[1]]),"\n",sep="")
sink(NULL)
readLines(tmp)
system(paste0(kakscalcpath, "KaKs_Calculator -i ", tmp, " -o ", tmp, ".YN -m YN"), ignore.stdout = FALSE, ignore.stderr = FALSE)
readLines(paste0(tmp,".YN"))
rbh2kaks.YN <- function(rbh, cds1, cds2,
kakscalcpath = paste0(find.package("CRBHits"),
"/extdata/KaKs_Calculator2.0/src/"),
threads = 1){
#internal function to get cds by name
get_cds_by_name <- function(x, cds){
return(cds[names(cds)==x])
}
if(!dir.exists(kakscalcpath)){stop("Error: KaKs_Calculator2.0 PATH does not exist. Please specify correct PATH and/or look into package installation prerequisites.")}
if(!file.exists(paste0(kakscalcpath, "AXTConvertor"))){stop("Error: AXTConvertor binary does not exist. Please specify correct PATH and/or look into package installation prerequisites.")}
if(!file.exists(paste0(kakscalcpath, "KaKs_Calculator"))){stop("Error: KaKs_Calculator binary does not exist. Please specify correct PATH and/or look into package installation prerequisites.")}
names(cds1) <- unlist(lapply(strsplit(names(cds1), " "), function(x) x[1]))
names(cds2) <- unlist(lapply(strsplit(names(cds2), " "), function(x) x[1]))
doMC::registerDoMC(threads)
i <- NULL
rbh.kaks.YN <- foreach::foreach(i = 1:dim(rbh)[1], .combine = rbind) %dopar% {
tmp <- tempfile()
#Biostrings::write.phylip(Biostrings::DNAMultipleAlignment(cds2codonaln(get_cds_by_name(rbh[i,1], cds1), get_cds_by_name(rbh[i,2], cds2))), file = tmp)
#system(paste0(kakscalcpath, "AXTConvertor ", tmp, " ", tmp, ".axt"), ignore.stdout = TRUE, ignore.stderr = TRUE)
tmp.codonaln <- cds2codonaln(get_cds_by_name(rbh[i, 1], cds1), get_cds_by_name(rbh[i, 2], cds2))
sink(tmp)
cat(paste0(names(tmp.codonaln), collapse="&"), "\n", sep="")
cat(as.character(tmp.codonaln[1][[1]]), "\n", sep="")
cat(as.character(tmp.codonaln[2][[1]]), "\n", sep="")
sink(NULL)
system(paste0(kakscalcpath, "KaKs_Calculator -i ", tmp, ".axt -o ", tmp, " -m YN"), ignore.stdout = TRUE, ignore.stderr = TRUE)
out <- unlist(strsplit(readLines(tmp)[2], "\t"))
system(paste0("rm ", tmp))
system(paste0("rm ", tmp, ".axt"))
out
}
return(cbind(rbh, rbh.kaks.YN))
}
library(foreach)
library(doMC)
ath_aly_crbh.kaks.YN <- rbh2kaks.YN(ath_aly_crbh$crbh.pairs, ath, aly, threads = 4)
rbh2kaks.YN <- function(rbh, cds1, cds2,
kakscalcpath = paste0(find.package("CRBHits"),
"/extdata/KaKs_Calculator2.0/src/"),
threads = 1){
#internal function to get cds by name
get_cds_by_name <- function(x, cds){
return(cds[names(cds)==x])
}
if(!dir.exists(kakscalcpath)){stop("Error: KaKs_Calculator2.0 PATH does not exist. Please specify correct PATH and/or look into package installation prerequisites.")}
if(!file.exists(paste0(kakscalcpath, "AXTConvertor"))){stop("Error: AXTConvertor binary does not exist. Please specify correct PATH and/or look into package installation prerequisites.")}
if(!file.exists(paste0(kakscalcpath, "KaKs_Calculator"))){stop("Error: KaKs_Calculator binary does not exist. Please specify correct PATH and/or look into package installation prerequisites.")}
names(cds1) <- unlist(lapply(strsplit(names(cds1), " "), function(x) x[1]))
names(cds2) <- unlist(lapply(strsplit(names(cds2), " "), function(x) x[1]))
doMC::registerDoMC(threads)
i <- NULL
rbh.kaks.YN <- foreach::foreach(i = 1:dim(rbh)[1], .combine = rbind) %dopar% {
tmp <- tempfile()
#Biostrings::write.phylip(Biostrings::DNAMultipleAlignment(cds2codonaln(get_cds_by_name(rbh[i,1], cds1), get_cds_by_name(rbh[i,2], cds2))), file = tmp)
#system(paste0(kakscalcpath, "AXTConvertor ", tmp, " ", tmp, ".axt"), ignore.stdout = TRUE, ignore.stderr = TRUE)
tmp.codonaln <- cds2codonaln(get_cds_by_name(rbh[i, 1], cds1), get_cds_by_name(rbh[i, 2], cds2))
sink(tmp)
cat(paste0(names(tmp.codonaln), collapse="&"), "\n", sep="")
cat(as.character(tmp.codonaln[1][[1]]), "\n", sep="")
cat(as.character(tmp.codonaln[2][[1]]), "\n", sep="")
sink(NULL)
system(paste0(kakscalcpath, "KaKs_Calculator -i ", tmp, " -o ", tmp, ".YN -m YN"), ignore.stdout = TRUE, ignore.stderr = TRUE)
out <- unlist(strsplit(readLines(paste0(tmp, ".YN"))[2], "\t"))
system(paste0("rm ", tmp))
system(paste0("rm ", tmp, ".YN"))
#system(paste0("rm ", tmp, ".axt"))
out
}
return(cbind(rbh, rbh.kaks.YN))
}
ath_aly_crbh.kaks.YN <- rbh2kaks.YN(ath_aly_crbh$crbh.pairs, ath, aly, threads = 4)
head(ath_aly_crbh.kaks.YN)
ath_aly_crbh.kaks <- rbh2kaks(ath_aly_crbh$crbh.pairs, ath, aly, threads = 4)
head(ath_aly_crbh.kaks)
library(CRBHits)
